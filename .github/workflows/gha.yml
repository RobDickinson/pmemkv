
name: pmemkv
on: [push, pull_request]

env:
    REPO:           pmemkv
    GITHUB_REPO:    pmem/pmemkv
    DOCKERHUB_REPO: pmem/pmemkv

jobs:
  linux:
    name: pmemkv
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER:          ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_PASSWORD:      ${{ secrets.DOCKERHUB_PASSWORD }}
      GITHUB_TOKEN:   ${{ secrets.DOC_UPDATE_GITHUB_TOKEN }}
      HOST_WORKDIR:   /home/runner/work/pmemkv/pmemkv
      WORKDIR:        utils/docker
    strategy:
      matrix:
        CONFIG: ["TYPE=normal OS=fedora OS_VER=32",
                 "TYPE=normal OS=ubuntu OS_VER=20.10 PUSH_IMAGE=1",
                 "TYPE=normal OS=ubuntu OS_VER=20.04 CHECK_CPP_STYLE=1",
                 "TYPE=normal OS=ubuntu OS_VER=20.04 COVERAGE=1",
                 "TYPE=valgrind OS=ubuntu OS_VER=20.04",
                 "TYPE=memcheck_drd OS=ubuntu OS_VER=20.04",
                 "TYPE=building OS=fedora OS_VER=32 COVERAGE=1 PUSH_IMAGE=1 AUTO_DOC_UPDATE=1",
                 "TYPE=building OS=ubuntu OS_VER=20.04 COVERAGE=1 PUSH_IMAGE=1",
                 "TYPE=bindings OS=ubuntu OS_VER=20.04_bindings PUSH_IMAGE=1",
                 "TYPE=compatibility OS=fedora OS_VER=32",
                 "TYPE=coverity OS=ubuntu OS_VER=20.04"]
    steps:
       - name: Clone the git repo
         uses: actions/checkout@v2
         with:
            fetch-depth: 50

       - name: Pull or rebuild the image
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./pull-or-rebuild-image.sh rebuild

       - name: Run the build
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./build.sh

       - name: Push the image
         run: cd $WORKDIR && source ./set-vars.sh && ${{ matrix.CONFIG }} /bin/bash -c "if [[ -f ${CI_FILE_PUSH_IMAGE_TO_REPO} ]]; then images/push-image.sh $OS-$OS_VER; fi"
